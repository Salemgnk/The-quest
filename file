import pygame

white = (255, 255, 255)
black = (0, 0, 0)
blue = (0, 0, 128)
 
def displayer(screen, input):
    font = pygame.font.Font(None, 36)
    text = font.render(input, True, white)
    textRect = text.get_rect()
    textRect.center = (screen.get_width() // 2, screen.get_height() - 950)
    screen.blit(text, textRect)import string
import random
import sys
from displayer import *
from test import *

input_text = ""
display = True

def display_screen(screen):
    screen.fill((0, 0, 0))
    displayer(screen, "Enter your password:")

    input_rect = pygame.Rect(200, 200, 400, 50)
    font = pygame.font.Font(None, 36)

    pygame.draw.rect(screen, white, input_rect, 2)        
    text_surface = font.render(input_text, True, white)
    screen.blit(text_surface, (input_rect.x + 5, input_rect.y + 5))

    pygame.display.flip()
import string
import random
import pygame
import pyperclip
from displayer import *

specials = "~#{([_-@]*!£$;,:/?)}"
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

def pass_gen(screen):
    input_rect = pygame.Rect(750, 200, 400, 50)
    input_text = ''

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_BACKSPACE and len(input_text) > 0:
                    input_text = input_text[:-1]
                elif event.key == pygame.K_RETURN:
                    length = max(int(input_text), 8)
                    mdp = ''.join(random.sample(string.ascii_letters + string.digits + specials, length))
                    pyperclip.copy(mdp)
                    font = pygame.font.Font(None, 36)
                    text = font.render(f"Password generated: {mdp}", True, white)
                    textRect = text.get_rect()
                    textRect.center = (screen.get_width() // 2, screen.get_height() - 850)
                    screen.blit(text, textRect)
                    pygame.display.flip()
                    pygame.time.delay(3000)
                elif event.unicode.isdigit() and len(input_text) < 2:
                    input_text += event.unicode

        screen.fill(BLACK)
        displayer(screen, "Enter password length (min 8):")
        pygame.draw.rect(screen, WHITE, input_rect, 2)
        font = pygame.font.Font(None, 36)
        text_surface = font.render(input_text, True, WHITE)
        screen.blit(text_surface, (input_rect.x + 5, input_rect.y + 5))
        pygame.display.flip()

import pygame
import string
import sys
from displayer import *
from pass_check import *
import os

os.environ["XDG_SESSION_TYPE"] = "xcb"
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
specials = "~#{([_-@]*!£$;,:/?)}"

def is_valid_password(password):
    if len(password) < 8:
        return False
    specials = set(string.punctuation)
    if not any(char in specials for char in password):
        return False
    if not any(char.isupper() for char in password):
        return False    
    if not any(char.isdigit() for char in password):
        return False    
    return True

def pass_checker(input, screen):
    special = False
    upper = False
    lenght = False

    if is_valid_password(input) == True:
        pic_displayer(screen, "SECURED.png")
        start_time = pygame.time.get_ticks()
        while pygame.time.get_ticks() - start_time < 1000:
            pass
        screen.fill(BLACK)
        pygame.display.flip()
    else:
        pic_displayer(screen, "weak.png")
        start_time = pygame.time.get_ticks()
        while pygame.time.get_ticks() - start_time < 2000:
            pass
        screen.fill(BLACK)
        pygame.display.flip()

def pic_displayer(screen, filepath):
    back = pygame.image.load(filepath).convert()
    scaled_image = pygame.transform.scale(back, screen.get_size())
    screen.blit(scaled_image, (0, 0))
    pygame.display.update()

def check_pass(screen):
    font = pygame.font.Font(None, 36)
    input_rect = pygame.Rect(750, 200, 400, 50)
    input_text = ''

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_BACKSPACE and len(input_text) > 0:
                    input_text = input_text[:-1]
                elif event.key == pygame.K_RETURN:
                    pass_checker(input_text, screen)
                elif event.unicode.isprintable():
                    input_text += event.unicode
        
        screen.fill(BLACK)
        displayer(screen, "Enter your password:")
        pygame.draw.rect(screen, WHITE, input_rect, 2)
        
        text_surface = font.render(input_text, True, WHITE)
        screen.blit(text_surface, (input_rect.x + 5, input_rect.y + 5))
        pygame.display.flip()

from pass_gen import *
import pygame
import tkinter as tk
from pass_check import *
from test import *
# display = True

def fade_in(image, screen):
    alpha = 0
    while alpha < 255:
        screen.fill((255, 255, 255))
        image.set_alpha(alpha)
        scaled_image = pygame.transform.scale(image, screen.get_size())
        screen.blit(scaled_image, (0, 0))
        pygame.display.flip()
        pygame.time.delay(10)
        alpha += 5

def fade_out(image, screen):
    alpha = 255
    while alpha > 0:
        screen.fill((255, 255, 255))
        image.set_alpha(alpha)
        scaled_image = pygame.transform.scale(image, screen.get_size())
        screen.blit(scaled_image, (0, 0))
        pygame.display.flip()
        pygame.time.delay(10)
        alpha -= 5

def draw_rectangle(screen, input, pos, text_pos):
    pygame.draw.rect(screen, (0, 0, 255), pos, 2)
    font = pygame.font.Font(None, 36)
    text_surface = font.render(input, True, (255, 255, 255))
    text_rect = text_surface.get_rect()
    text_rect.center = text_pos
    screen.blit(text_surface, text_rect)
    pygame.display.update()

def buttons_display(screen):
    pic_displayer(screen, "back.png")
    draw_rectangle(screen, "Password Checker", [100, 250, 400, 100], (300, 300))
    draw_rectangle(screen, "Password Generator", [100, 600, 400, 100], (300, 650))
    draw_rectangle(screen, "Navigator", [1400, 250, 400, 100], (1600, 300))
    draw_rectangle(screen, "Pentest Tools", [1400, 600, 400, 100], (1600, 650))


def buttons_choice(screen, mouse_pos, event):
    rect_positions = [
        {"name": "Password Checker", "pos": [100, 250, 400, 100]},
        {"name": "Password Generator", "pos": [100, 600, 400, 100]},
        {"name": "Navigator", "pos": [1400, 250, 400, 100]},
        {"name": "Pentest Tools", "pos": [1400, 600, 400, 100]}
    ]
    for rect_data in rect_positions:
        pos = rect_data["pos"]
        if pygame.Rect(pos).collidepoint(mouse_pos):
               return rect_data["name"]

def window():
    pygame.init()
    screen = pygame.display.set_mode((1920, 1080), pygame.RESIZABLE)
    framerate = pygame.time.Clock()
    pygame.display.set_caption("Upsilon Solutions")
    icon = pygame.image.load("upsilon.png").convert()
    pygame.display.set_icon(icon)

    fade_in(icon, screen)
    pygame.time.delay(1500)
    fade_out(icon, screen)
    buttons_display(screen)
    displayer(screen, 'Welcome on Upsilon Tools. What do you want to do ?')
    display = True
    while display:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                display = False
                pygame.quit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                button = buttons_choice(screen, mouse_pos, event)
                if button == "Password Checker":
                    check_pass(screen)
                    pygame.display.flip()
                elif button == "Password Generator":
                    pass_gen(screen)
                    pygame.display.flip()
        framerate.tick(30)
    pygame.quit()


if __name__ == "__main__":
    window()
